// Code generated by cool go-validate tool; DO NOT EDIT.
package models

import (
	"regexp"
	"strings"
	"unicode/utf8"
)

type ValidationError struct {
	Field string
	Err   string
}

func (u User) Validate() ([]ValidationError, error) {
	var validErrors []ValidationError

	if utf8.RuneCountInString(u.ID) != 36 {
		validErrors = append(validErrors, ValidationError{"ID", "length is not equal 36"})
	}

	if u.Age < 18 {
		validErrors = append(validErrors, ValidationError{"Age", "value: < 18"})
	}

	if u.Age > 50 {
		validErrors = append(validErrors, ValidationError{"Age", "value: < 50"})
	}

	re := regexp.MustCompile("^\\w+@\\w+\\.\\w+$")
	if !re.MatchString(u.Email) {
		validErrors = append(validErrors, ValidationError{"Email", "no match with: ^\\w+@\\w+\\.\\w+$"})
	}

	valid := false
	for _, str := range strings.Split("admin,stuff", ",") {
		if u.Role == str {
			valid = true
			break
		}
	}
	if !valid {
		validErrors = append(validErrors, ValidationError{"Role", "no match with: admin,stuff"})
	}

	return validErrors, nil
}

func (a App) Validate() ([]ValidationError, error) {
	var validErrors []ValidationError

	if utf8.RuneCountInString(a.Version) != 5 {
		validErrors = append(validErrors, ValidationError{"Version", "length is not equal 5"})
	}

	return validErrors, nil
}

func (r Response) Validate() ([]ValidationError, error) {
	var validErrors []ValidationError

	valid := false
	for _, str := range []int{200, 404, 500} {
		if r.Code == str {
			valid = true
			break
		}
	}
	if !valid {
		validErrors = append(validErrors, ValidationError{"Code", "no match with: 200,404,500"})
	}

	return validErrors, nil
}
