//go:build go1.6
// +build go1.6

// Code generated by codecgen - DO NOT EDIT.

package user

import (
	"errors"
	"github.com/ugorji/go/codec"
	"runtime"
	"strconv"
)

const (
	// ----- content types ----
	codecSelferCcUTF85698 = 1
	codecSelferCcRAW5698  = 255
	// ----- value types used ----
	codecSelferValueTypeArray5698     = 10
	codecSelferValueTypeMap5698       = 9
	codecSelferValueTypeString5698    = 6
	codecSelferValueTypeInt5698       = 2
	codecSelferValueTypeUint5698      = 3
	codecSelferValueTypeFloat5698     = 4
	codecSelferValueTypeNil5698       = 1
	codecSelferBitsize5698            = uint8(32 << (^uint(0) >> 63))
	codecSelferDecContainerLenNil5698 = -2147483648
)

var (
	errCodecSelferOnlyMapOrArrayEncodeToStruct5698 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer5698 struct{}

func codecSelfer5698False() bool { return false }
func codecSelfer5698True() bool  { return true }

func init() {
	if codec.GenVersion != 25 {
		_, file, _, _ := runtime.Caller(0)
		ver := strconv.FormatInt(int64(codec.GenVersion), 10)
		panic(errors.New("codecgen version mismatch: current: 25, need " + ver + ". Re-generate file: " + file))
	}
}

func (User) codecSelferViaCodecgen() {}
func (x *User) CodecEncodeSelf(e *codec.Encoder) {
	var h codecSelfer5698
	z, r := codec.GenHelper().Encoder(e)
	_, _, _ = h, z, r
	if z.EncBasicHandle().CheckCircularRef {
		z.EncEncode(x)
		return
	}
	if x == nil {
		r.EncodeNil()
	} else {
		yy2arr2 := z.EncBasicHandle().StructToArray
		_ = yy2arr2
		const yyr2 bool = false // struct tag has 'toArray'
		if yyr2 || yy2arr2 {
			z.EncWriteArrayStart(7)
			z.EncWriteArrayElem()
			r.EncodeInt(int64(x.ID))
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Name))
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Username))
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Email))
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Phone))
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Password))
			z.EncWriteArrayElem()
			r.EncodeString(string(x.Address))
			z.EncWriteArrayEnd()
		} else {
			z.EncWriteMapStart(7)
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"ID\"")
			} else {
				r.EncodeString(`ID`)
			}
			z.EncWriteMapElemValue()
			r.EncodeInt(int64(x.ID))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Name\"")
			} else {
				r.EncodeString(`Name`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.Name))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Username\"")
			} else {
				r.EncodeString(`Username`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.Username))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Email\"")
			} else {
				r.EncodeString(`Email`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.Email))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Phone\"")
			} else {
				r.EncodeString(`Phone`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.Phone))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Password\"")
			} else {
				r.EncodeString(`Password`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.Password))
			z.EncWriteMapElemKey()
			if z.IsJSONHandle() {
				z.WriteStr("\"Address\"")
			} else {
				r.EncodeString(`Address`)
			}
			z.EncWriteMapElemValue()
			r.EncodeString(string(x.Address))
			z.EncWriteMapEnd()
		}
	}
}

func (x *User) CodecDecodeSelf(d *codec.Decoder) {
	var h codecSelfer5698
	z, r := codec.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	yyct2 := r.ContainerType()
	if yyct2 == codecSelferValueTypeNil5698 {
		*(x) = User{}
	} else if yyct2 == codecSelferValueTypeMap5698 {
		yyl2 := z.DecReadMapStart()
		if yyl2 == 0 {
		} else {
			x.codecDecodeSelfFromMap(yyl2, d)
		}
		z.DecReadMapEnd()
	} else if yyct2 == codecSelferValueTypeArray5698 {
		yyl2 := z.DecReadArrayStart()
		if yyl2 != 0 {
			x.codecDecodeSelfFromArray(yyl2, d)
		}
		z.DecReadArrayEnd()
	} else {
		panic(errCodecSelferOnlyMapOrArrayEncodeToStruct5698)
	}
}

func (x *User) codecDecodeSelfFromMap(l int, d *codec.Decoder) {
	var h codecSelfer5698
	z, r := codec.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if z.DecCheckBreak() {
				break
			}
		}
		z.DecReadMapElemKey()
		yys3 := r.DecodeStringAsBytes()
		z.DecReadMapElemValue()
		switch string(yys3) {
		case "ID":
			x.ID = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize5698))
		case "Name":
			x.Name = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
		case "Username":
			x.Username = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
		case "Email":
			x.Email = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
		case "Phone":
			x.Phone = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
		case "Password":
			x.Password = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
		case "Address":
			x.Address = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
		default:
			z.DecStructFieldNotFound(-1, string(yys3))
		} // end switch yys3
	} // end for yyj3
}

func (x *User) codecDecodeSelfFromArray(l int, d *codec.Decoder) {
	var h codecSelfer5698
	z, r := codec.GenHelper().Decoder(d)
	_, _, _ = h, z, r
	var yyj11 int
	var yyb11 bool
	var yyhl11 bool = l >= 0
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = z.DecCheckBreak()
	}
	if yyb11 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.ID = (int)(z.C.IntV(r.DecodeInt64(), codecSelferBitsize5698))
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = z.DecCheckBreak()
	}
	if yyb11 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Name = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = z.DecCheckBreak()
	}
	if yyb11 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Username = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = z.DecCheckBreak()
	}
	if yyb11 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Email = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = z.DecCheckBreak()
	}
	if yyb11 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Phone = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = z.DecCheckBreak()
	}
	if yyb11 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Password = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
	yyj11++
	if yyhl11 {
		yyb11 = yyj11 > l
	} else {
		yyb11 = z.DecCheckBreak()
	}
	if yyb11 {
		z.DecReadArrayEnd()
		return
	}
	z.DecReadArrayElem()
	x.Address = (string)(z.DecStringZC(r.DecodeStringAsBytes()))
	for {
		yyj11++
		if yyhl11 {
			yyb11 = yyj11 > l
		} else {
			yyb11 = z.DecCheckBreak()
		}
		if yyb11 {
			break
		}
		z.DecReadArrayElem()
		z.DecStructFieldNotFound(yyj11-1, "")
	}
}

func (x *User) IsCodecEmpty() bool {
	return !(x.ID != 0 || x.Name != "" || x.Username != "" || x.Email != "" || x.Phone != "" || x.Password != "" || x.Address != "" || false)
}
