package main

const templ = `// Code generated by cool go-validate tool; DO NOT EDIT.
package {{.PackageName}}

import (
	"regexp"
	"strings"
	"unicode/utf8"
)

type ValidationError struct {
	Field string
	Err   string
}
{{range .Items}}
	{{if .Fields}}
	{{$recvName := .Name | receiverName}}
	func ({{$recvName}} {{.Name}}) Validate() ([]ValidationError, error) {
		var validErrors []ValidationError
	
		{{range .Fields}}
			{{if eq .TypeField  "string"}}
				{{if .Tags.len}}
				if utf8.RuneCountInString({{$recvName}}.{{.Name}}) != {{.Tags.len}} {
					validErrors = append(validErrors, ValidationError{"{{.Name}}", "length is not equal {{.Tags.len}}"})
				}{{end}}
			
				{{if .Tags.regexp}}
				re := regexp.MustCompile("{{.Tags.regexp}}")
				if !re.MatchString({{$recvName}}.{{.Name}}) {
					validErrors = append(validErrors, ValidationError{"{{.Name}}", "no match with: {{.Tags.regexp}}"})
				}{{end}}
		
				{{if .Tags.in}}
				valid := false
				for _, str := range strings.Split("{{.Tags.in}}", ",") {
					if {{$recvName}}.{{.Name}} == str {
						valid = true
						break
					}
				}
				if !valid {
					validErrors = append(validErrors, ValidationError{"{{.Name}}", "no match with: {{.Tags.in}}"})
				}{{end}}
			{{end}}
		
			{{if eq .TypeField "int"}}
				{{if .Tags.min}}
				if {{$recvName}}.{{.Name}} < {{.Tags.min}} {
					validErrors = append(validErrors, ValidationError{"{{.Name}}", "value: < {{.Tags.min}}"})
				}{{end}}
				
				{{if .Tags.max}}
				if {{$recvName}}.{{.Name}} > {{.Tags.max}} {
					validErrors = append(validErrors, ValidationError{"{{.Name}}", "value: < {{.Tags.max}}"})
				}{{end}}
			
				{{if .Tags.in}}
				valid := false
				for _, str := range []int{ {{.Tags.in}} } {
					if {{$recvName}}.{{.Name}} == str {
						valid = true
						break
					}
				}
				if !valid {
					validErrors = append(validErrors, ValidationError{"{{.Name}}", "no match with: {{.Tags.in}}"})
				}{{end}}
			{{end}}
		{{end}}
	
		return validErrors, nil
	}
	{{end}}
{{end}}`
