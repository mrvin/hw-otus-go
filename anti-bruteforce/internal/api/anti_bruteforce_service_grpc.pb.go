// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: anti_bruteforce_service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AntiBruteForceService_AllowAuthorization_FullMethodName         = "/antibruteforce.AntiBruteForceService/AllowAuthorization"
	AntiBruteForceService_AddNetworkToWhitelist_FullMethodName      = "/antibruteforce.AntiBruteForceService/AddNetworkToWhitelist"
	AntiBruteForceService_DeleteNetworkFromWhitelist_FullMethodName = "/antibruteforce.AntiBruteForceService/DeleteNetworkFromWhitelist"
	AntiBruteForceService_Whitelist_FullMethodName                  = "/antibruteforce.AntiBruteForceService/Whitelist"
	AntiBruteForceService_AddNetworkToBlacklist_FullMethodName      = "/antibruteforce.AntiBruteForceService/AddNetworkToBlacklist"
	AntiBruteForceService_DeleteNetworkFromBlacklist_FullMethodName = "/antibruteforce.AntiBruteForceService/DeleteNetworkFromBlacklist"
	AntiBruteForceService_Blacklist_FullMethodName                  = "/antibruteforce.AntiBruteForceService/Blacklist"
	AntiBruteForceService_CleanBucket_FullMethodName                = "/antibruteforce.AntiBruteForceService/CleanBucket"
)

// AntiBruteForceServiceClient is the client API for AntiBruteForceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AntiBruteForceServiceClient interface {
	AllowAuthorization(ctx context.Context, in *ReqAllowAuthorization, opts ...grpc.CallOption) (*ResAllowAuthorization, error)
	AddNetworkToWhitelist(ctx context.Context, in *ReqNetwork, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteNetworkFromWhitelist(ctx context.Context, in *ReqNetwork, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Whitelist(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResListNetworks, error)
	AddNetworkToBlacklist(ctx context.Context, in *ReqNetwork, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteNetworkFromBlacklist(ctx context.Context, in *ReqNetwork, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Blacklist(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResListNetworks, error)
	CleanBucket(ctx context.Context, in *ReqCleanBucket, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type antiBruteForceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAntiBruteForceServiceClient(cc grpc.ClientConnInterface) AntiBruteForceServiceClient {
	return &antiBruteForceServiceClient{cc}
}

func (c *antiBruteForceServiceClient) AllowAuthorization(ctx context.Context, in *ReqAllowAuthorization, opts ...grpc.CallOption) (*ResAllowAuthorization, error) {
	out := new(ResAllowAuthorization)
	err := c.cc.Invoke(ctx, AntiBruteForceService_AllowAuthorization_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceServiceClient) AddNetworkToWhitelist(ctx context.Context, in *ReqNetwork, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AntiBruteForceService_AddNetworkToWhitelist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceServiceClient) DeleteNetworkFromWhitelist(ctx context.Context, in *ReqNetwork, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AntiBruteForceService_DeleteNetworkFromWhitelist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceServiceClient) Whitelist(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResListNetworks, error) {
	out := new(ResListNetworks)
	err := c.cc.Invoke(ctx, AntiBruteForceService_Whitelist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceServiceClient) AddNetworkToBlacklist(ctx context.Context, in *ReqNetwork, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AntiBruteForceService_AddNetworkToBlacklist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceServiceClient) DeleteNetworkFromBlacklist(ctx context.Context, in *ReqNetwork, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AntiBruteForceService_DeleteNetworkFromBlacklist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceServiceClient) Blacklist(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResListNetworks, error) {
	out := new(ResListNetworks)
	err := c.cc.Invoke(ctx, AntiBruteForceService_Blacklist_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *antiBruteForceServiceClient) CleanBucket(ctx context.Context, in *ReqCleanBucket, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, AntiBruteForceService_CleanBucket_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AntiBruteForceServiceServer is the server API for AntiBruteForceService service.
// All implementations should embed UnimplementedAntiBruteForceServiceServer
// for forward compatibility
type AntiBruteForceServiceServer interface {
	AllowAuthorization(context.Context, *ReqAllowAuthorization) (*ResAllowAuthorization, error)
	AddNetworkToWhitelist(context.Context, *ReqNetwork) (*emptypb.Empty, error)
	DeleteNetworkFromWhitelist(context.Context, *ReqNetwork) (*emptypb.Empty, error)
	Whitelist(context.Context, *emptypb.Empty) (*ResListNetworks, error)
	AddNetworkToBlacklist(context.Context, *ReqNetwork) (*emptypb.Empty, error)
	DeleteNetworkFromBlacklist(context.Context, *ReqNetwork) (*emptypb.Empty, error)
	Blacklist(context.Context, *emptypb.Empty) (*ResListNetworks, error)
	CleanBucket(context.Context, *ReqCleanBucket) (*emptypb.Empty, error)
}

// UnimplementedAntiBruteForceServiceServer should be embedded to have forward compatible implementations.
type UnimplementedAntiBruteForceServiceServer struct {
}

func (UnimplementedAntiBruteForceServiceServer) AllowAuthorization(context.Context, *ReqAllowAuthorization) (*ResAllowAuthorization, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllowAuthorization not implemented")
}
func (UnimplementedAntiBruteForceServiceServer) AddNetworkToWhitelist(context.Context, *ReqNetwork) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNetworkToWhitelist not implemented")
}
func (UnimplementedAntiBruteForceServiceServer) DeleteNetworkFromWhitelist(context.Context, *ReqNetwork) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNetworkFromWhitelist not implemented")
}
func (UnimplementedAntiBruteForceServiceServer) Whitelist(context.Context, *emptypb.Empty) (*ResListNetworks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Whitelist not implemented")
}
func (UnimplementedAntiBruteForceServiceServer) AddNetworkToBlacklist(context.Context, *ReqNetwork) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNetworkToBlacklist not implemented")
}
func (UnimplementedAntiBruteForceServiceServer) DeleteNetworkFromBlacklist(context.Context, *ReqNetwork) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNetworkFromBlacklist not implemented")
}
func (UnimplementedAntiBruteForceServiceServer) Blacklist(context.Context, *emptypb.Empty) (*ResListNetworks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Blacklist not implemented")
}
func (UnimplementedAntiBruteForceServiceServer) CleanBucket(context.Context, *ReqCleanBucket) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanBucket not implemented")
}

// UnsafeAntiBruteForceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AntiBruteForceServiceServer will
// result in compilation errors.
type UnsafeAntiBruteForceServiceServer interface {
	mustEmbedUnimplementedAntiBruteForceServiceServer()
}

func RegisterAntiBruteForceServiceServer(s grpc.ServiceRegistrar, srv AntiBruteForceServiceServer) {
	s.RegisterService(&AntiBruteForceService_ServiceDesc, srv)
}

func _AntiBruteForceService_AllowAuthorization_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAllowAuthorization)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServiceServer).AllowAuthorization(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiBruteForceService_AllowAuthorization_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServiceServer).AllowAuthorization(ctx, req.(*ReqAllowAuthorization))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForceService_AddNetworkToWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNetwork)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServiceServer).AddNetworkToWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiBruteForceService_AddNetworkToWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServiceServer).AddNetworkToWhitelist(ctx, req.(*ReqNetwork))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForceService_DeleteNetworkFromWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNetwork)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServiceServer).DeleteNetworkFromWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiBruteForceService_DeleteNetworkFromWhitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServiceServer).DeleteNetworkFromWhitelist(ctx, req.(*ReqNetwork))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForceService_Whitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServiceServer).Whitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiBruteForceService_Whitelist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServiceServer).Whitelist(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForceService_AddNetworkToBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNetwork)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServiceServer).AddNetworkToBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiBruteForceService_AddNetworkToBlacklist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServiceServer).AddNetworkToBlacklist(ctx, req.(*ReqNetwork))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForceService_DeleteNetworkFromBlacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqNetwork)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServiceServer).DeleteNetworkFromBlacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiBruteForceService_DeleteNetworkFromBlacklist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServiceServer).DeleteNetworkFromBlacklist(ctx, req.(*ReqNetwork))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForceService_Blacklist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServiceServer).Blacklist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiBruteForceService_Blacklist_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServiceServer).Blacklist(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _AntiBruteForceService_CleanBucket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCleanBucket)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AntiBruteForceServiceServer).CleanBucket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AntiBruteForceService_CleanBucket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AntiBruteForceServiceServer).CleanBucket(ctx, req.(*ReqCleanBucket))
	}
	return interceptor(ctx, in, info, handler)
}

// AntiBruteForceService_ServiceDesc is the grpc.ServiceDesc for AntiBruteForceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AntiBruteForceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "antibruteforce.AntiBruteForceService",
	HandlerType: (*AntiBruteForceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AllowAuthorization",
			Handler:    _AntiBruteForceService_AllowAuthorization_Handler,
		},
		{
			MethodName: "AddNetworkToWhitelist",
			Handler:    _AntiBruteForceService_AddNetworkToWhitelist_Handler,
		},
		{
			MethodName: "DeleteNetworkFromWhitelist",
			Handler:    _AntiBruteForceService_DeleteNetworkFromWhitelist_Handler,
		},
		{
			MethodName: "Whitelist",
			Handler:    _AntiBruteForceService_Whitelist_Handler,
		},
		{
			MethodName: "AddNetworkToBlacklist",
			Handler:    _AntiBruteForceService_AddNetworkToBlacklist_Handler,
		},
		{
			MethodName: "DeleteNetworkFromBlacklist",
			Handler:    _AntiBruteForceService_DeleteNetworkFromBlacklist_Handler,
		},
		{
			MethodName: "Blacklist",
			Handler:    _AntiBruteForceService_Blacklist_Handler,
		},
		{
			MethodName: "CleanBucket",
			Handler:    _AntiBruteForceService_CleanBucket_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "anti_bruteforce_service.proto",
}
