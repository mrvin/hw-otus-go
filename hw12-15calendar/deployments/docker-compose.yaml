version: "3.9"
services:
    calendar-ws:
        build:
         context: ../
         dockerfile: cmd/calendar-ws/Dockerfile
        ports:
         - "8080:8080"
        depends_on:
         - calendar
         - otel_collector
        volumes:
         - ./../configs/calendar-ws.yml:/etc/calendar/calendar-ws.yml

    calendar:
        build:
         context: ../
         dockerfile: cmd/calendar/Dockerfile
        ports:
         - "8088:8088" # REST API
         - "55555:55555" # gRPC API
        environment:
         ENV: PROD
        depends_on:
          postgres:
            condition: service_healthy
#          otel_collector:
#            condition: service_healthy
        volumes:
         - ./../configs/calendar.yml:/etc/calendar/calendar.yml

    scheduler:
       build:
        context: ../
        dockerfile: cmd/scheduler/Dockerfile
       depends_on:
         postgres:
           condition: service_healthy
         rabbitmq:
           condition: service_healthy
       volumes:
        - ./../configs/scheduler.yml:/etc/calendar/scheduler.yml

    sender:
       build:
        context: ../
        dockerfile: cmd/sender/Dockerfile
       depends_on:
         rabbitmq:
           condition: service_healthy
       volumes:
        - ./../configs/sender.yml:/etc/calendar/sender.yml

    # Create service with PostgreSQL.
    postgres:
        image: postgres:15.2-alpine3.17
        ports:
         - "5432"
        user: root
        env_file:
         - postgres.env
        healthcheck:
          test: ["CMD", "pg_isready", "-q", "-d", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}"]
        volumes:
         - ${HOME}/volumes_docker/postgres-data:/var/lib/postgresql/data

    # Create service with RabbitMQ.
    rabbitmq:
        image: rabbitmq:3.11.13-management-alpine
        ports:
         - "15672:15672" # for serve RabbitMQ GUI
         - "5672:5672"
        healthcheck:
          test: rabbitmq-diagnostics -q ping

    # OpenTelemetry Collector
    otel_collector:
        image: otel/opentelemetry-collector-contrib:0.75.0
        command: --config=/etc/otel-collector.yml
        ports:
         - "4317:4317" # OTLP over gRPC receiver
         - "9464:9464" # Prometheus exporter
        # healthcheck:
        depends_on:
         - jaeger
        volumes:
         - ./../configs/otel-collector.yml:/etc/otel-collector.yml

    jaeger:
        image: jaegertracing/all-in-one:1.44
        ports:
         - "16686:16686" # for serve Jaeger GUI
         - "14268:14268"
        # healthcheck:

    prometheus:
        image: prom/prometheus:v2.43.0
        command: --config.file=/etc/prometheus/prometheus.yml
        ports:
         - "9090:9090"
        depends_on:
         - otel_collector
        volumes:
         - ./../configs/prometheus.yml:/etc/prometheus/prometheus.yml

    grafana:
        image: grafana/grafana:8.5.22
        ports:
         - "3000:3000"
        depends_on:
         - prometheus
        volumes:
         - ./../configs/grafana/provisioning:/etc/grafana/provisioning
         - ${HOME}/volumes_docker/grafana-data:/var/lib/grafana
